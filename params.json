{"name":"Stereotype","tagline":"Leiningen project serving as an example of how I express my idioms and best practices for a Clojure based application","body":"stereotype\r\n==========\r\n\r\nLeiningen project serving as an example of how I express my idioms and best practices for a Clojure based application\r\n\r\nSample of how I'm doing the following practices that exist for every project.  There will be a bias toward applications in the style as Software as a Service.  Typically manifesting itself as a client - server implemented as a compojure ring based web server responding and pushing data to a websocket enabled single page web application written in clojurescript.  Much of this is about me learning on how to best use leiningen and plugins.  Further creating a plugin of my own to implement the ideas expressed here.\r\n\r\nPractices cover the following areas of concern when building and maintaining software\r\n* Continuous Integration \r\n* Continuous Delivery \r\n* Literate Programming \r\n* Test Driven Programming \r\n* Configuration Management \r\n* Development \r\n* Debugging \r\n* Deployment \r\n* Clojure best practices\r\n\r\nThings to look for as you look at the stereo typical project\r\n* Project Documentation using marginalia\r\n* Dev-Ops using pallet ops\r\n** Example of all the different types of deployments\r\n** Using lein pallet from command line to perform dev-ops tasks an application will have through-out its lifecycle\r\n* Tests driven by using expectations framework and associated lein plugin\r\n* Testing strategy of using clj-driver to implement high level acceptance tests verifing the high level functional requirements are satisfied\r\n* Deploying uberjars and jars to a private repository along with a wrapper project for deploying easily into the cloud\r\n* Simplified client server communication layer\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}